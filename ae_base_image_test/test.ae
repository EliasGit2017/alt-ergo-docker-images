type 'a set

logic empty : 'a set
logic add : 'a , 'a set -> 'a set
logic mem : 'a , 'a set -> prop

axiom mem_empty:
  forall x : 'a.
    not mem(x, empty : 'a set)

axiom mem_add:
  forall x, y : 'a. forall s : 'a set.
    mem(x, add(y, s)) <-> (x = y or mem(x, s))

logic is1, is2 : int set
logic iss : int set set

goal g_4:
  is1 = is2 ->
    (not mem(1, add(2+3, empty : int set))) and
    mem (is1, add (is2, iss))
